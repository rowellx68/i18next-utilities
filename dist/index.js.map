{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import fs from 'node:fs'\nimport path from 'node:path'\nimport YAML from 'yaml'\nimport { flatten } from 'flat'\nimport { merge } from 'ts-deepmerge'\nimport { setProperty } from 'dot-prop'\nimport { globSync } from 'fast-glob'\nimport { createLogger, Plugin, Logger } from 'vite'\nimport { I18NextTypedLoaderOptions, IncludePattern, ResourceBundle } from './types'\n\nexport type { I18NextTypedLoaderOptions }\n\nconst virtualModuleId = 'virtual:i18next-typed-loader'\nconst resolvedVirtualModuleId = '\\0' + virtualModuleId\n\nconst defaultIncludes: IncludePattern[] = [\n  '**/*.json',\n  '**/*.yml',\n  '**/*.yaml',\n]\n\nconst allowedExtensions = ['.json', '.yml', '.yaml']\n\nconst assertExistence = (paths: string[]): void => {\n  for (const p of paths) {\n    if (!fs.existsSync(p)) {\n      throw new Error(`Path does not exist: ${p}`)\n    }\n  }\n}\n\nconst findAllFiles = (globs: string | string[], cwd: string): string[] => {\n  const globArray = Array.isArray(globs) ? globs : [globs]\n\n  return globArray\n    .map((g) => globSync(g, { cwd }))\n    .reduce((acc, val) => acc.concat(val), [])\n}\n\nconst enumerateLanguages = (directory: string): string[] =>\n  fs\n    .readdirSync(directory)\n    .filter((f) => fs.statSync(path.join(directory, f)).isDirectory())\n\nconst resolvePaths = (paths: string[], cwd: string): string[] =>\n  paths.map((p) => (path.isAbsolute(p) ? p : path.resolve(cwd, p)))\n\nconst loadContent = (options: I18NextTypedLoaderOptions, logger: Logger) => {\n  const directories = resolvePaths(options.paths, process.cwd())\n  const watchedFiles: string[] = []\n\n  assertExistence(directories)\n\n  const uniqueIncludes = Array.from(\n    new Set(options.include ?? defaultIncludes)\n  )\n\n  if (options.paths.length === 0) {\n    logger.warn('No paths to search for files.')\n  }\n\n  if (uniqueIncludes.length === 0) {\n    logger.warn('No includes patterns specified.')\n  }\n\n  let allLanguages: Set<string> = new Set()\n  let appResourceBundle: ResourceBundle = {}\n\n  for (const directory of directories) {\n    const languages = enumerateLanguages(directory)\n    allLanguages = new Set([...allLanguages, ...languages])\n\n    for (const language of languages) {\n      const resourceBundle: ResourceBundle = {}\n      resourceBundle[language] = {}\n\n      const languageDirectory = path.join(directory, language)\n      const files = findAllFiles(uniqueIncludes, languageDirectory)\n\n      for (const file of files) {\n        watchedFiles.push(file)\n\n        const fullPath = path.resolve(directory, language, file)\n        const extension = path.extname(file)\n\n        if (!allowedExtensions.includes(extension)) {\n          logger.warn(`Unsupported file: ${file}`)\n          continue\n        }\n\n        const fileContent = fs.readFileSync(fullPath, 'utf8')\n\n        const content =\n          extension === '.json'\n            ? JSON.parse(String(fileContent))\n            : YAML.parse(String(fileContent))\n\n        if (options.namespaceResolution) {\n          let namespaceFilePath = file\n\n          if (options.namespaceResolution === 'basename') {\n            namespaceFilePath = path.basename(file)\n          } else if (options.namespaceResolution === 'relativePath') {\n            namespaceFilePath = path.relative(\n              path.join(directory, language),\n              file\n            )\n          }\n\n          const nsparts = namespaceFilePath\n              .replace(extension, '')\n              .split(path.sep)\n              .filter((part) => part !== '' && part !== '..')\n\n          const namespace = [language].concat(nsparts).join('.')\n\n          setProperty(resourceBundle, namespace, content)\n        } else {\n          resourceBundle[language] = content\n        }\n\n        appResourceBundle = merge(appResourceBundle, resourceBundle)\n      }\n    }\n  }\n\n  const defaultBundle = appResourceBundle[options.defaultLocale || 'en'] as Record<string, ResourceBundle>\n\n  return { watchedFiles, bundle: appResourceBundle, defaultBundle }\n};\n\nconst generateTypeDefinition = (resource: ResourceBundle, options: I18NextTypedLoaderOptions) => {\n  const namespaces = Object.keys(resource)\n\n  const defaultNS = namespaces.find((ns) => ns === options.defaultNamespace || 'translation')\n\n  const defaultResourceKeys: string[] = []\n  const resourcesKeys: string[] = []\n\n  if (defaultNS) {\n    const flattened = flatten(resource[defaultNS]) as object\n    defaultResourceKeys.push(...Object.keys(flattened))\n  }\n\n  for (const ns of namespaces) {\n    const flattened = flatten(resource[ns]) as object\n    const keys = Object.keys(flattened).map((key) => `${ns}:${key}`)\n    resourcesKeys.push(...keys)\n  }\n\n  const definition = `import 'i18next'\n\ntype GeneratedDefaultResource = {\n  ${defaultResourceKeys.map((key) => `'${key}': string`).join('\\n')}\n}\n\ntype GeneratedResources = {\n  ${resourcesKeys.map((key) => `'${key}': string`).join('\\n')}\n}\n\ndeclare module 'i18next' {\n  interface CustomTypeOptions {\n    defaultNS: GeneratedDefaultResource\n    resources: GeneratedResources\n  }\n}\n`;\n\n    fs.writeFile(options.output || './types/i18next.d.ts', definition, 'utf-8', (err) => {});\n}\n\nconst factory = (options: I18NextTypedLoaderOptions): Plugin => {\n  const logger = createLogger(options.logLevel ?? 'warn', { prefix: '[typed-i18next-loader]' })\n\n  const plugin: Plugin = {\n    name: 'vite-plugin-typed-i18next-loader',\n    resolveId(id) {\n      if (id === virtualModuleId) {\n        return resolvedVirtualModuleId\n      }\n\n      return null\n    },\n    load(id) {\n      if (id !== resolvedVirtualModuleId) {\n        return null\n      }\n\n      const { watchedFiles, bundle, defaultBundle } = loadContent(options, logger)\n      watchedFiles.forEach(this.addWatchFile)\n      generateTypeDefinition(defaultBundle, options)\n\n      return `export default ${JSON.stringify(bundle)}`\n    },\n    handleHotUpdate({ server }) {\n      const module = server.moduleGraph.getModuleById(resolvedVirtualModuleId)\n\n      if (module) {\n        server.moduleGraph.invalidateModule(module)\n      }\n    },\n  }\n\n  return plugin\n}\n\nexport default factory\n"],"mappings":"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","names":[]}